<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        o9H/A7mVYpUzuMVeAAAAAElFTkSuQmCC
</value>
  </data>
</root>